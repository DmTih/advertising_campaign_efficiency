/*
Проект: Анализ эффективности рекламных кампаний 

Цель: 
Помочь отделу маркетинга понять какая рекламная кампания сработала более эффективно с 
точки зрения затрат, краткосрочной и долгосрочной прибыли. 

Дано: 
1. Список ID пользователей каждой из кампаний
2. Потрачено по 250 000 рублей на каждую кампанию
3. С кампании №1 зарегистрировалось в приложении 171 человек, с кампании №2 — 236 по состоянию на 1 сентября. 

Описание используемых датасетов:
1. user_actions (действия пользователей)
- user_id - уникальный идентификатор пользователя
- order_id - идентификатор заказа
- action - тип действия: 'create_order' (создание заказа) или 'cancel_order' (отмена заказа)
- time - временная метка совершения действия

2. orders (информация о заказах)
- order_id - уникальный идентификатор заказа
- creation_time - дата и время создания заказа
- product_ids - массив идентификаторов товаров в заказе

3. products (информация о товарах)
- product_id - уникальный идентификатор товара
- name - наименование товара
- price - цена товара в рублях

Что делал:
1. Посчитал CAC для двух рекламных кампаний
2. Рассчитал ROI для каждого рекламного канала
3. Рассчитал среднюю стоимость заказа привлеченных пользователей за первую неделю использования приложения 
4. Посчитал Retention для всех пользователей (база), затем Retention 1-го и 7-го дня у привлечённых пользователей, 
   сравнил результаты с базой и друг другом.
5. Рассчитал накопительный ARPPU по двум кампаниям и сравнил его с CAC, чтобы понять, в какой момент кампания достигнет порога окупаемости. 
6. Визуализировал результаты c помощью дашборда в Redash

ШАГ 1. Считаю затраты на привлечение одного покупателя для двух рекламных кампаний (CAC)

Данный код:
1. Собирает данные о клиентах из таблицы user_actions, учитывая только успешные заказы.
2. Фильтрует пользователей, которые совершили действия 1 сентября 2022 года и относятся к одной из двух рекламных кампаний.
3. Считает количество уникальных клиентов для каждой кампании.
4. Вычисляет CAC.
*/

WITH campaign_data AS (
    SELECT
        COUNT(DISTINCT user_id) FILTER(WHERE user_id IN (
            8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
            8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
            8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
            8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
            9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
            9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
            9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
            9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
            9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
            9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
            9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
            9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
            9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
            10105, 10122, 10134, 10135
            ))  AS count_customers_company_1,
        COUNT(DISTINCT user_id) FILTER(WHERE user_id IN (
            8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
            8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
            8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
            8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
            8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
            9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
            9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
            9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
            9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
            9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
            9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
            9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
            9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
            9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
            9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
            9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
            10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131
            ))  AS count_customers_company_2
    FROM (
        SELECT DISTINCT user_id 
        FROM user_actions
        WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
        AND user_id IN (
            SELECT user_id FROM user_actions WHERE DATE(time) = '2022-09-01'
            AND user_id IN (
                8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
                8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
                8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
                8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
                9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
                9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
                9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
                9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
                9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
                9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
                9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
                9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
                9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
                10105, 10122, 10134, 10135,
                8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
                8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
                8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
                8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
                8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
                9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
                9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
                9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
                9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
                9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
                9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
                9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
                9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
                9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
                9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
                9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
                10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131
            )
        )
    ) t1
)

SELECT 
    'Кампания № 1' AS ads_campaign,
    ROUND(250000.0 / count_customers_company_1, 2) AS cac
FROM campaign_data

UNION ALL

SELECT 
    'Кампания № 2' AS ads_campaign,
    ROUND(250000.0 / count_customers_company_2, 2) AS cac
FROM campaign_data

ORDER BY cac DESC

/*
Вывод: У рекламной кампании №2 затраты на привлечение одного покупателя оказались ниже: 1068.38 руб против 1461.99 руб
Также нам известно, что с кампании №2 зарегистрировалось в приложении больше новых пользователей: 236 против 171.
Пока кампания №2 выглядит более эффективной с точки зрения затрат. 
*/


/*
ШАГ 2. Считаю возврат инвестиций для двух рекламных кампаний (ROI)

Данный код:
1. Собирает данные о доходах с заказов для пользователей из двух рекламных кампаний.
2. Фильтрует заказы, учитывая только успешные (не отмененные).
3. Суммирует выручку (order_price) для каждой кампании.
4. Вычисляет ROI по формуле: ROI = ((Общая выручка - Затраты) / Затраты) * 100%  
*/

WITH campaign_data AS (
    SELECT
        SUM(order_price) FILTER(WHERE user_id IN (
            8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
            8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
            8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
            8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
            9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
            9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
            9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
            9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
            9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
            9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
            9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
            9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
            9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
            10105, 10122, 10134, 10135
            ))  AS sale_company_1,
        SUM(order_price) FILTER(WHERE user_id IN (
            8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
            8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
            8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
            8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
            8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
            9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
            9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
            9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
            9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
            9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
            9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
            9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
            9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
            9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
            9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
            9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
            10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131
            ))  AS sale_company_2
    FROM user_actions ua
    LEFT JOIN (
        SELECT
            t1.order_id,
            SUM(p.price) AS order_price     
    USING (order_id)
    )

SELECT 
    'Кампания № 1' AS ads_campaign,
    ROUND((sale_company_1 - 250000.0)/250000 * 100, 2) AS roi
FROM campaign_data

UNION ALL

SELECT 
    'Кампания № 2' AS ads_campaign,
    ROUND((sale_company_2 - 250000.0)/250000 * 100, 2) AS roi
FROM campaign_data

ORDER BY roi DESC

/*
Вывод: 
Первая кампания привлекла меньше пользователей и демонстрирует более высокий CAC, но она показывает при этом положительную окупаемость 
инвестиций (ROI +14.5%). Это означает, что каждый вложенный рубль приносит прибыль. Вторая кампания, напротив, показывает отрицательную 
рентабельность (ROI -1.61%), что указывает на ее нерентабельность в текущий момент. Динамика показателей может измениться со временем, 
но при этом на основании текущих данных инвестиции в первую кампанию выглядят более обоснованными.
P.S. Важно учитывать, что при подсчете ROI я использовал выручку, поэтому можно говорить только об эффективности трафика, а не финансовых показателях.  

ШАГ 3. Считаю средний чек для двух рекламных кампаний. Пытаюсь понять, почему пользователи из первого рекламного канала приносят нам больше денег. 

Данный код:
1. Фильтрует данные: отбирает только успешные заказы (исключая отмененные) и ограничивает период анализа неделей
2. Разворачивает список product_ids из таблицы orders и соединяет с таблицей products для получения цен товаров
3. Распределяет пользователей через CASE по кампаниям
4. Вычисляет средний чек для каждого пользователя, затем производит агрегацию по кампаниям
*/ 

WITH user_avg_checks AS (
    SELECT
        user_id,
        CASE
            WHEN user_id IN (
                8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
                8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
                8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
                8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
                9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
                9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
                9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
                9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
                9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
                9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
                9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
                9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
                9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
                10105, 10122, 10134, 10135) THEN 'Кампания № 1'
            WHEN user_id IN (
                8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
                8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
                8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
                8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
                8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
                9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
                9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
                9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
                9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
                9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
                9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
                9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
                9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
                9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
                9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
                9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
                10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 
                10131) THEN 'Кампания № 2'
        END AS ads_campaign,
        AVG(order_price) AS user_avg_check
    FROM user_actions ua
    LEFT JOIN (
        SELECT
            t1.order_id,
            SUM(p.price) AS order_price 
        FROM
            (SELECT
                order_id,
                unnest(product_ids) AS product_id
            FROM orders o
            WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
            AND creation_time::DATE BETWEEN '2022-09-01' AND '2022-09-07' 
            ) t1
        LEFT JOIN products p USING (product_id)
        GROUP BY t1.order_id
        ) t2 USING (order_id)
    WHERE user_id IN ( 8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
                8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
                8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
                8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
                9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
                9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
                9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
                9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
                9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
                9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
                9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
                9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
                9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
                10105, 10122, 10134, 10135,
                8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
                8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
                8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
                8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
                8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
                9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
                9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
                9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
                9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
                9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
                9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
                9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
                9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
                9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
                9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
                9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
                10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 
                10131)
    GROUP BY user_id, ads_campaign
)

SELECT
    ads_campaign,
    ROUND(AVG(user_avg_check), 2) AS avg_check
FROM user_avg_checks
GROUP BY ads_campaign
ORDER BY avg_check DESC

/*
Вывод: 
Средний чек для кампании № 1 — 371.73 рубля, а для кампании № 2 — 380.88 рублей. 
Парадоксально, но кампания №2 с отрицательным ROI демонстрирует даже чуть более высокий средний чек: 380.88 рублей против 371.73 рубля у кампании № 1. 
На первый взгляд, это несущественная разница, хотя без проведения статистических тестов нельзя делать однозначных выводов о значимости различий. 

ШАГ 4. Считаю Retention для всех пользователей, а затем Retention 1-го и 7-го дня для привлечённых пользователей. 
Визуализирую и сравниваю результаты с базой и друг другом.

Данный код:
1. Рассчитывает Retention для всей пользовательской базы (первый запрос). Для этого определяю дату первого взаимодействия (start_date)
   для каждого пользователя и вычисляю процент возвращающихся пользователей по дням (от 0 до N). 
   Месяц первого взаимодействия (start_month) используется для наглядности в последующей визуализации. 
2. Производит анализ по кампаниям (второй запрос): фильтрует пользователей из двух рекламных кампаний, считает Retention конкретно 
   для 1-го и 7-го дня, а также использует нормализацию, с учетом не только даты, но и кампании.
3. Аналогично предыдущим запросам используется та же фильтрация по датам и успешным заказам.
*/

-- Первый запрос. Общий Retention
SELECT
DATE_TRUNC('month', start_date)::DATE AS start_month, --месяц первого взаимодействия,
start_date,
date - start_date AS day_number, -- количество дней, прошедших с даты первого взаимодействия
-- COUNT(DISTINCT user_id) AS active_users,
-- MAX(COUNT(DISTINCT user_id)) OVER() AS max_active_users,
ROUND(COUNT(DISTINCT user_id)::DECIMAL / MAX(COUNT(DISTINCT user_id)) OVER(PARTITION BY start_date), 2) AS retention
FROM (
    SELECT
        user_id,
        time::DATE AS date,
        MIN(time::DATE) OVER (PARTITION BY user_id) AS start_date --дата первого взаимодействия 
    FROM user_actions
    ) t1
GROUP BY start_month, start_date, day_number
ORDER BY start_date, day_number

-- Второй запрос. Retention для 1-го и 7-го дня по кампаниям
SELECT
    ads_campaign,
    start_date,
    day_number,
    ROUND(active_users::DECIMAL / MAX(active_users) OVER(PARTITION BY ads_campaign, start_date), 2) AS retention
FROM (
    SELECT
        CASE
            WHEN user_id IN (
                8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741,
                8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845,
                8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972,
                8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071,
                9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175,
                9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317,
                9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472,
                9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550,
                9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654,
                9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762,
                9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871,
                9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998,
                9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103,
                10105, 10122, 10134, 10135) THEN 'Кампания № 1'
            WHEN user_id IN (
                8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681,
                8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754,
                8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851,
                8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929,
                8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000,
                9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117,
                9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203,
                9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289,
                9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383,
                9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497,
                9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567,
                9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692,
                9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757,
                9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863,
                9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930,
                9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058,
                10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113,
                10131) THEN 'Кампания № 2'
        END AS ads_campaign,
        start_date,
        date - start_date AS day_number, -- количество дней, прошедших с даты первого взаимодействия
        COUNT(DISTINCT user_id) AS active_users
    FROM (
        SELECT
            user_id,
            time::DATE AS date,
            MIN(time::DATE) OVER (PARTITION BY user_id) AS start_date --дата первого взаимодействия 
        FROM user_actions
        WHERE user_id IN ( 8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741,
                    8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845,
                    8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972,
                    8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071,
                    9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175,
                    9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317,
                    9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472,
                    9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550,
                    9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654,
                    9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762,
                    9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871,
                    9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998,
                    9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103,
                    10105, 10122, 10134, 10135,
                    8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681,
                    8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754,
                    8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851,
                    8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929,
                    8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000,
                    9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117,
                    9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203,
                    9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289,
                    9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383,
                    9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497,
                    9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567,
                    9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692,
                    9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757,
                    9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863,
                    9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930,
                    9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058,
                    10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113,
                    10131)
    ) t1
    GROUP BY ads_campaign, start_date, day_number
) t2
WHERE day_number IN (0, 1, 7)
ORDER BY ads_campaign, day_number

/*
Вывод: 
Retention как 1-го, так и 7-го дня у кампании №1 более чем в 2 раза выше чем у кампании №2.
Более того, Retention первой кампании значительно выше средних значений по магазину (при сравнении с базой), в то время как
Retention второй кампании соизмерим с показателями первого дня, но падает к 7-му. Видимо, именно в этом заключается основная причина,
почему пользователи из первой группы приносят компании больше денег.

ШАГ 5. Анализ окупаемости рекламных кампаний через накопительный ARPPU  

Данный код:  
1. Создает списки пользователей для каждой кампании (исключая отмененные заказы).  
2. Считает общее количество покупателей в каждой кампании.  
3. Вычисляет ежедневную выручку по каждой кампании.  
4. Рассчитывает накопительную выручку (через оконную функцию).  
5. Вычисляет накопительный ARPPU (средний доход на пользователя).  
6. Сравнивает ARPPU с CAC для определения дня окупаемости.
*/

WITH 
-- Таблица отмененных заказов
cancel_orders AS (
    SELECT order_id 
    FROM user_actions 
    WHERE action = 'cancel_order'
),

-- Пользователи кампании №1
campaign1_users AS (
    SELECT user_id
    FROM user_actions
    WHERE user_id IN (
        8631, 8632, 8638, 8643, 8657, 8673, 8706, 8707, 8715, 8723, 8732, 8739, 8741, 
        8750, 8751, 8752, 8770, 8774, 8788, 8791, 8804, 8810, 8815, 8828, 8830, 8845, 
        8853, 8859, 8867, 8869, 8876, 8879, 8883, 8896, 8909, 8911, 8933, 8940, 8972, 
        8976, 8988, 8990, 9002, 9004, 9009, 9019, 9020, 9035, 9036, 9061, 9069, 9071, 
        9075, 9081, 9085, 9089, 9108, 9113, 9144, 9145, 9146, 9162, 9165, 9167, 9175, 
        9180, 9182, 9197, 9198, 9210, 9223, 9251, 9257, 9278, 9287, 9291, 9313, 9317, 
        9321, 9334, 9351, 9391, 9398, 9414, 9420, 9422, 9431, 9450, 9451, 9454, 9472, 
        9476, 9478, 9491, 9494, 9505, 9512, 9518, 9524, 9526, 9528, 9531, 9535, 9550, 
        9559, 9561, 9562, 9599, 9603, 9605, 9611, 9612, 9615, 9625, 9633, 9652, 9654, 
        9655, 9660, 9662, 9667, 9677, 9679, 9689, 9695, 9720, 9726, 9739, 9740, 9762, 
        9778, 9786, 9794, 9804, 9810, 9813, 9818, 9828, 9831, 9836, 9838, 9845, 9871, 
        9887, 9891, 9896, 9897, 9916, 9945, 9960, 9963, 9965, 9968, 9971, 9993, 9998, 
        9999, 10001, 10013, 10016, 10023, 10030, 10051, 10057, 10064, 10082, 10103, 
        10105, 10122, 10134, 10135
    )
    AND order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY user_id
),

-- Пользователи кампании №2
campaign2_users AS (
    SELECT user_id
    FROM user_actions
    WHERE user_id IN (
        8629, 8630, 8644, 8646, 8650, 8655, 8659, 8660, 8663, 8665, 8670, 8675, 8680, 8681, 
        8682, 8683, 8694, 8697, 8700, 8704, 8712, 8713, 8719, 8729, 8733, 8742, 8748, 8754, 
        8771, 8794, 8795, 8798, 8803, 8805, 8806, 8812, 8814, 8825, 8827, 8838, 8849, 8851, 
        8854, 8855, 8870, 8878, 8882, 8886, 8890, 8893, 8900, 8902, 8913, 8916, 8923, 8929, 
        8935, 8942, 8943, 8949, 8953, 8955, 8966, 8968, 8971, 8973, 8980, 8995, 8999, 9000, 
        9007, 9013, 9041, 9042, 9047, 9064, 9068, 9077, 9082, 9083, 9095, 9103, 9109, 9117, 
        9123, 9127, 9131, 9137, 9140, 9149, 9161, 9179, 9181, 9183, 9185, 9190, 9196, 9203, 
        9207, 9226, 9227, 9229, 9230, 9231, 9250, 9255, 9259, 9267, 9273, 9281, 9282, 9289, 
        9292, 9303, 9310, 9312, 9315, 9327, 9333, 9335, 9337, 9343, 9356, 9368, 9370, 9383, 
        9392, 9404, 9410, 9421, 9428, 9432, 9437, 9468, 9479, 9483, 9485, 9492, 9495, 9497, 
        9498, 9500, 9510, 9527, 9529, 9530, 9538, 9539, 9545, 9557, 9558, 9560, 9564, 9567, 
        9570, 9591, 9596, 9598, 9616, 9631, 9634, 9635, 9636, 9658, 9666, 9672, 9684, 9692, 
        9700, 9704, 9706, 9711, 9719, 9727, 9735, 9741, 9744, 9749, 9752, 9753, 9755, 9757, 
        9764, 9783, 9784, 9788, 9790, 9808, 9820, 9839, 9841, 9843, 9853, 9855, 9859, 9863, 
        9877, 9879, 9880, 9882, 9883, 9885, 9901, 9904, 9908, 9910, 9912, 9920, 9929, 9930, 
        9935, 9939, 9958, 9959, 9961, 9983, 10027, 10033, 10038, 10045, 10047, 10048, 10058, 
        10059, 10067, 10069, 10073, 10075, 10078, 10079, 10081, 10092, 10106, 10110, 10113, 10131
    )
    AND order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY user_id
),

-- Количество покупателей в каждой кампании
customers_count AS (
    SELECT
        (SELECT COUNT(*) FROM campaign1_users) AS campaign1_count,
        (SELECT COUNT(*) FROM campaign2_users) AS campaign2_count
),

-- Доходы по дням для кампании №1
campaign1_revenue AS (
    SELECT 
        date - '2022-09-01' AS day,
        SUM(price) AS revenue
    FROM (
        SELECT 
            o.creation_time::DATE AS date,
            p.price
        FROM orders o
        JOIN user_actions ua ON o.order_id = ua.order_id
        JOIN (
            SELECT 
                order_id, 
                UNNEST(product_ids) AS product_id 
            FROM orders
        ) op ON o.order_id = op.order_id
        JOIN products p ON op.product_id = p.product_id
        WHERE 
            ua.user_id IN (SELECT user_id FROM campaign1_users)
            AND o.order_id NOT IN (SELECT order_id FROM cancel_orders)
    ) subq
    GROUP BY day
    ORDER BY day
),

-- Накопительный доход для кампании №1
campaign1_cumulative AS (
    SELECT
        day,
        SUM(revenue) OVER (ORDER BY day) AS cumulative_revenue
    FROM campaign1_revenue
),

-- Доходы по дням для кампании №2
campaign2_revenue AS (
    SELECT 
        date - '2022-09-01' AS day,
        SUM(price) AS revenue
    FROM (
        SELECT 
            o.creation_time::DATE AS date,
            p.price
        FROM orders o
        JOIN user_actions ua ON o.order_id = ua.order_id
        JOIN (
            SELECT 
                order_id, 
                UNNEST(product_ids) AS product_id 
            FROM orders
        ) op ON o.order_id = op.order_id
        JOIN products p ON op.product_id = p.product_id
        WHERE 
            ua.user_id IN (SELECT user_id FROM campaign2_users)
            AND o.order_id NOT IN (SELECT order_id FROM cancel_orders)
    ) subq
    GROUP BY day
    ORDER BY day
),

-- Накопительный доход для кампании №2
campaign2_cumulative AS (
    SELECT
        day,
        SUM(revenue) OVER (ORDER BY day) AS cumulative_revenue
    FROM campaign2_revenue
),

-- CAC для обеих кампаний
cac_values AS (
    SELECT
        'Кампания № 1' AS ads_campaign,
        ROUND(250000.0 / (SELECT campaign1_count FROM customers_count), 2) AS cac
    UNION ALL
    SELECT
        'Кампания № 2' AS ads_campaign,
        ROUND(250000.0 / (SELECT campaign2_count FROM customers_count), 2) AS cac
)

-- Итоговый результат
SELECT
    'Кампания № 1' AS ads_campaign,
    'Day ' || c1.day AS day,
    ROUND(c1.cumulative_revenue / (SELECT campaign1_count FROM customers_count), 2) AS cumulative_arppu,
    (SELECT cac FROM cac_values WHERE ads_campaign = 'Кампания № 1') AS cac
FROM campaign1_cumulative c1

UNION ALL

SELECT
    'Кампания № 2' AS ads_campaign,
    'Day ' || c2.day AS day,
    ROUND(c2.cumulative_revenue / (SELECT campaign2_count FROM customers_count), 2) AS cumulative_arppu,
    (SELECT cac FROM cac_values WHERE ads_campaign = 'Кампания № 2') AS cac
FROM campaign2_cumulative c2

ORDER BY ads_campaign, day

/*
Вывод:  
В первой кампании мы достигли окупаемости на 5-й день, во второй не достигли даже на 7-й (что было уже понятно из
отрицательного ROI), но эти дополнительные данные позволили нам наглядно увидеть динамику на графике.  
Дашборд доступен по ссылке: https://redash.public.karpov.courses/public/dashboards/QivfWJuMzrjuQzSNmjXVUFivlO8w8Ue5ONflbMUO?org_slug=default
*/